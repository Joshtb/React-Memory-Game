{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Card/Card.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","to","href","title","topScore","newScore","correctIncorrect","Jumbotron","Card","console","log","key","id","onClick","handleClick","style","styles","src","image","alt","Wrapper","children","App","width","height","state","Friends","currentScore","clicked","randomShuffle","i","length","j","Math","floor","random","_ref","handleIncrement","_this","setState","handleShuffle","handleReset","shuffledFriends","indexOf","concat","_this2","this","components_Navbar_Navbar","score","components_Jumbotron_Jumbotron","components_Wrapper_Wrapper","map","item","components_Card_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f49900e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Navbar = props => (\r\n            \r\n            <nav className=\"navbar navbar-light bg-light\"to=\"/\">\r\n            \r\n  \r\n    \r\n<div>\r\n<ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n        <a href=\"/clicky-game/\">{props.title}</a>  \r\n        </li>\r\n        <li className=\"nav-item\"> \r\n     Score- Top: {props.topScore}\r\n        </li>\r\n        <li className=\"nav-item\"> \r\n     Current: {props.newScore}\r\n        </li>\r\n        <li className=\"nav-item\" >{props.correctIncorrect}</li>\r\n        <li>Click on an image to earn points, but don't click on any more than once! </li>\r\n        </ul>\r\n            </div>\r\n            </nav>\r\n          );\r\n\r\n \r\nexport default Navbar;","import React from 'react';\r\nimport \"./Jumbotron.css\"\r\nconst Jumbotron = props => (\r\n<div className = \"jumbotron\">\r\n<h1></h1>\r\n</div>\r\n\r\n\r\n)\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport \"./Card.css\"\r\n\r\n\r\nconst Card = props =>  {\r\n   \r\n \r\n        console.log(props); \r\n     \r\n        return (\r\n        \r\n                <div className=\"card\"\r\n                key={props.id} \r\n                onClick={() => props.handleClick(props.id)}\r\n                >\r\n               \r\n               <img className=\"card-img-top\"style={props.styles} src={props.image} alt=\"Card img cap\" />\r\n          \r\n          \r\n            </div>\r\n          );\r\n    \r\n}\r\n \r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport Navbar from \"../src/components/Navbar\"\nimport Jumbotron from \"../src/components/Jumbotron\"\nimport Friends from \"./friends.json\"\nimport Card from \"./components/Card\"\nimport './App.css';\nimport Wrapper from './components/Wrapper';\n\n\n\n\nclass App extends Component {\n   styles={\n    width:150,\n    height:150\n  }\nstate = {\n  Friends,\n  topScore:0,\n  currentScore:0,\n  correctIncorrect: \"\",\n  clicked: []\n\n}\n\nstyles={\n  width:150,\n  height:150\n}\n\nrandomShuffle = (Friends) => {\n  for (let i = Friends.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [Friends[i], Friends[j]] = [Friends[j], Friends[i]];\n  }\n  return Friends;\n};\n\nhandleIncrement = () => {\n  const newScore = this.state.currentScore + 1;\n  this.setState({\n    currentScore: newScore,\n    correctIncorrect: \"You guessed correctly!\"\n  });\n  if (newScore >= this.state.topScore) {\n    this.setState({ topScore: newScore, currentScore:newScore });\n  }\n  else if (newScore === 12) {\n    this.setState({ correctIncorrect: \"You win!\" });\n  }\n  this.handleShuffle();\n};\n\n\nhandleReset = () => {\n \n  this.handleShuffle();\n};\n\nhandleShuffle = () => {\n  let shuffledFriends = this.randomShuffle(Friends);\n  this.setState({ Friends: shuffledFriends });\n};\n\nhandleClick = id => {\n  if (this.state.clicked.indexOf(id) === -1) {\n    this.handleIncrement();\n    this.setState({ clicked: this.state.clicked.concat(id) });\n  } else {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"You guessed incorrectly!\",\n      clicked: []\n    });\n    this.handleReset();\n    \n  }\n};\n \n\n\n\n  render() {\n    \n   \n    return (\n      <div>\n      <Navbar\n      title=\"One Piece Clicky Game\"\n      topScore={this.state.topScore}\n      score={this.state.currentScore}\n      correctIncorrect={this.state.correctIncorrect}\n      \n      />\n      <Jumbotron />\n     <Wrapper>\n      {this.state.Friends.map(item =>(\n      \n        <Card \n        handleClick={this.handleClick}\n        handleIncrement={this.handleIncrement}\n        handleReset={this.handleReset}\n        handleShuffle={this.handleShuffle}\n        image={item.image}\n        id={item.id}\n        key={item.id}\n        style={this.styles}\n\n      \n      />\n    \n      ))}\n      </Wrapper>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}